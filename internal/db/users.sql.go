// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (username)
VALUES ($1)
RETURNING id, username, created_at
`

func (q *Queries) CreateUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, createUser, username)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.CreatedAt)
	return i, err
}

const readUserInfo = `-- name: ReadUserInfo :one
SELECT id, username, created_at
FROM users
WHERE id = $1
`

func (q *Queries) ReadUserInfo(ctx context.Context, id pgtype.UUID) (User, error) {
	row := q.db.QueryRow(ctx, readUserInfo, id)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.CreatedAt)
	return i, err
}

const removeUser = `-- name: RemoveUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) RemoveUser(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, removeUser, id)
	return err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = $2
WHERE id = $1
RETURNING id, username, created_at
`

type UpdateUserParams struct {
	ID       pgtype.UUID `json:"id"`
	Username string      `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser, arg.ID, arg.Username)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.CreatedAt)
	return i, err
}
